////////////////////////////////////////////
///////////// NOTES ////////////////////////
////////////////////////////////////////////

==== SECTION 2 - Execution Contexts and Lexical Environments ====

Syntax Parser
- A program that reads your code and determines validity and executions.
- Translates human code to computer instructions

Lexical Environment
- Where something sits physically in the code you write

Execution Context
- A wrapper to help manage the code that is running
    1) Creation Phase on file.js load:
        Global
        - Stores functions or variables in memory

        Global Execution Context
        - Creates:
            1) Global Object === window object
            2) var this === window object

        Outer Environment
        - null at the Global level
    2) Execution Phase
        - Runs your code

Hoisting
- Setup of Memory Space for Variables and Functions to get ready for code to run
- Entire functions and contents are hoisted in memory
- Variable values have placeholders set in memory until code reaches it

Javascript & Undefined
- Undefined is a special value and a special keyword
- Value of variables when global execution context is run
- Stored in memory but value is not yet set
- "I've never set this value"

Single Threaded
- One command at a time

Synchronus Execution
- One at a time in the order they are positioned

Invocation
- Calling a function
- Telling a function to run

Variable Environment
- Where variables live in memory and relative to each other

Scope
- Where a variable is available in your code

Asynchronous
- More than one at a time
- via the Event Loop
    -however, will not run event loop items in queue until all call stack items are complete

Dynamic Typing
- Opposite of static typed
- Javascript figures out what data type is in real time


==== SECTION 3 - Types and Operators ====

Primitive Data Types x6
    Undefined - no set value yet
    Null - the variable has no value or nothing
    Boolean - true or false
    Number - floating point numbers with decimals
    String - sequence of characters
    Symbol - ES6

Operators
    - functions

Operator Precedence
    - which operator gets called first

Operator Associativity
    - what order operator functions get called in

Coercion
    - converting a value from one type to another

    *********
    **TESTS**
    *********

    Number values of:
        Number(true) => 1
        Number(false) => 0
        Number(undefined) => NaN
        Number(null) => 0

    Equality (==):
        3 == 3 => true
        "3" == 3 => true
        false == 0 => true
        null == 0 => false
        "" == 0 => true
        "" == false => true

    Strict Equality (===):
        - doesn't try to coerce data types
        3 === 3 => true
        "3" === "3" => true
        "3" === 3 => false



==== SECTION 4 - Objects and Functions ====

Namespace
- container for variables and functions
- to keep variables and functions with same name separate

JSON
- JavaScript Object Notation

First Class Functions
- functions can act as a type
- assign variable names, pass functions as parameters, etc.

Expression
- a unit of code that results in a value

Arguments
- parameters you pass to a function

Callback Function
- function you give to another function to be run when the other function is finished
- function you invoke calls back by calling the function you gave when it finishes

    **** Callback Example ****
    function tellMeWhenDone(callback) {
        var a = 1000;
        var b = 2000;
        callback(a, b);                         // pass a and b to callback function
    }

    tellMeWhenDone(function(a,b){               // invoke tellMeWhenDone w/ annoymous function as callback w/ a, b as agruments
        console.log('I am done!', a+b);         // run the callback and console log message
    });

    tellMeWhenDone(function(a,b){
        console.log('All done!', a,b);
    });


Function Currying
- creating a copy of a function but with preset parameters



==== SECTION 5 - Classical vs. Prototypal Inheritance ====

Inheritance
- one object that gets access to properties and methods of another object

    Classical Inheritance
    -

    Prototypal Inheritance
    - Javascript


Reflection
- an object can look at itself and list its properties and methods


==== SECTION 6 - Building Objects ====

Function Constructors
- a normal function that constructs objects

    - Using the 'new' keyword operator to construct objects
        - creates new empty object...
        - sets prototype of empty object to the prototype property of the function (object constructor) called
        - automatically points 'this' to new empty object
        - returns object automatically

    - 'Object.create' and Pure Prototypal Inheritance
        - (for some new browers and engines)
        - creates an empty object...
        - points the prototype object to the person object
        - override the person object fields as needed
        - create object, create an object from that object constructor, point to other objects as it's prototype

    - ES6 and 'class'
        - 'class' is a definition intially, not an object until 'new' is used
        - Defines what an object should look like
        - Object is only created when 'new' is used
        - 'extends' keyword sets the prototype for objects created by particular class






Polyfill
- code that adds a feature that the engine may lack
    - EX. recreate what 'Object.create' is doing but with 'new'
    - this ensures code can run



==== SECTION 7 - Odds and Ends ====

Initialization
- data to begin state when loaded
- placeholder data


==== SECTION 8 - Examining Famous Frameworks and Libraries ====

Method Chaining
- calling on method after another
- each method affects the parent object
- only if the methods return itself


==== SECTION 9 - Let's Build A Framework/Library ====
